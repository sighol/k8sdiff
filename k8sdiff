#!/usr/bin/python

import argparse
import difflib
import io
import pathlib
import sys

import yaml
from pygments import highlight
from pygments.formatters import TerminalFormatter
from pygments.lexers.data import YamlLexer
from pygments.lexers.diff import DiffLexer

def sort_list_of_dicts(obj: list):
    if "kind" in obj[0]:
        obj.sort(key=lambda x: (x["kind"]))
    if "metadata" in obj[0] and "name" in obj[0]["metadata"]:
        obj.sort(key=lambda x: x["metadata"]["name"])
    if "name" in obj[0]:
        obj.sort(key=lambda x: x["name"])


def reorder_dict(obj, key: str = None, depth=0):
    if isinstance(obj, list):
        if len(obj) > 0 and isinstance(obj[0], dict):
            sort_list_of_dicts(obj)
            return [reorder_dict(child, depth=depth+1) for child in obj]
        else:
            return obj
    elif isinstance(obj, dict):
        return {key: reorder_dict(value, key=key, depth=depth+1) for key, value in obj.items()}
    else:
        return obj


def reorder_file(filepath):
    path = pathlib.Path(filepath)
    with path.open("r") as file:
        files = list(yaml.load_all(file, yaml.FullLoader))
        sort_list_of_dicts(files)
        output = []
        for file in files:
            output.append(reorder_dict(file))
    return output


def reorder_file_to_str_list(filepath):
    list_of_obj = reorder_file(filepath)
    stream = io.StringIO()
    yaml.dump_all(list_of_obj, stream)
    s = stream.getvalue()
    stream.close()

    return s.splitlines()


def highlight_if_isatty(content, lexer, formatter):
    if sys.stdout.isatty():
        return highlight(content, lexer, formatter)
    else:
        return content


def main():
    p = argparse.ArgumentParser()
    p.add_argument("FILE1")
    p.add_argument("FILE2", nargs="?")
    p.add_argument("-n", help="number of context lines", type=int, default=3)

    args = p.parse_args()

    flattened1 = reorder_file_to_str_list(args.FILE1)
    if not args.FILE2:
        print(highlight_if_isatty("\n".join(flattened1), YamlLexer(), TerminalFormatter()))
    else:
        flattened2 = reorder_file_to_str_list(args.FILE2)

        output = []
        diff = difflib.unified_diff(
            flattened1, flattened2, fromfile=args.FILE1, tofile=args.FILE2, n=args.n
        )
        diff = list(diff)
        for line in diff:
            output.append(line)

        print(highlight_if_isatty("\n".join(output), DiffLexer(), TerminalFormatter()))


if __name__ == "__main__":
    main()
